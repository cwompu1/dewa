import os
import logging
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, KeyboardButton, ReplyKeyboardMarkup, MenuButtonWebApp, BotCommand
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from handlers.admin import setup_admin_handlers
from models.admin import Admin
from database import db, app, init_db

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ DEBUG –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
TOKEN = os.getenv('BOT_TOKEN')
if not TOKEN:
    raise ValueError("No BOT_TOKEN found in environment variables!")

logger.info(f"Bot token: {TOKEN[:20]}...")  # –õ–æ–≥–∏—Ä—É–µ–º —á–∞—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

# URL –≤–∞—à–µ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
WEBAPP_URL = os.getenv('WEBAPP_URL', "https://dewa-1gdh.onrender.com")
logger.info(f"WebApp URL: {WEBAPP_URL}")

def create_main_keyboard():
    keyboard = [
        [KeyboardButton('üõç –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ')],
        [KeyboardButton('üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å')]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        logger.info(f"Start command received from user {update.effective_user.id}")
        
        keyboard = create_main_keyboard()
        
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Diwa store! üéâ\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=keyboard
        )
        logger.info("Start command processed successfully")
        
    except Exception as e:
        logger.error(f"Error in start command: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def setup_commands_and_menu(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ –º–µ–Ω—é –±–æ—Ç–∞"""
    try:
        logger.info("Setting up commands and menu...")
        commands = [
            BotCommand("start", "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand("help", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"),
            BotCommand("catalog", "üì± –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤"),
            BotCommand("admin", "‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
            BotCommand("openapp", "üõç –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω")
        ]
        
        await application.bot.set_my_commands(commands)
        await application.bot.set_chat_menu_button(
            menu_button=MenuButtonWebApp(text="–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=WEBAPP_URL))
        )
        logger.info("Commands and menu setup completed")
        
    except Exception as e:
        logger.error(f"Error setting up commands and menu: {e}", exc_info=True)

async def open_app(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /openapp"""
    try:
        logger.info(f"OpenApp command received from user {update.effective_user.id}")
        keyboard = [[KeyboardButton("üõç –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=WEBAPP_URL))]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω:",
            reply_markup=reply_markup
        )
        logger.info("OpenApp command processed successfully")
    except Exception as e:
        logger.error(f"Error in openapp command: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    try:
        logger.info(f"Help command received from user {update.effective_user.id}")
        await update.message.reply_text(
            "ü§ñ –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
            "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "/catalog - –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞\n"
            "/openapp - –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
            "/admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø)\n\n"
            "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
        )
        logger.info("Help command processed successfully")
    except Exception as e:
        logger.error(f"Error in help command: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def catalog_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /catalog"""
    try:
        logger.info(f"Catalog command received from user {update.effective_user.id}")
        keyboard = [
            [InlineKeyboardButton("üëü –û–±—É–≤—å", callback_data="cat_shoes")],
            [InlineKeyboardButton("üëï –û–¥–µ–∂–¥–∞", callback_data="cat_clothes")],
            [InlineKeyboardButton("üëú –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã", callback_data="cat_accessories")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üì± –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=reply_markup
        )
        logger.info("Catalog command processed successfully")
    except Exception as e:
        logger.error(f"Error in catalog command: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
    try:
        query = update.callback_query
        logger.info(f"Button callback received: {query.data} from user {query.from_user.id}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        if query.data.startswith("cat_"):
            category = query.data.split("_")[1]
            await query.answer(f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
            await query.edit_message_text(f"–ü–æ–∫–∞–∑—ã–≤–∞—é —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}...")
            
        logger.info("Button callback processed successfully")
    except Exception as e:
        logger.error(f"Error in button handler: {e}", exc_info=True)
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        logger.info(f"Message received: {update.message.text} from user {update.effective_user.id}")
        if update.message.text == "üì± –ö–∞—Ç–∞–ª–æ–≥":
            await catalog_command(update, context)
        elif update.message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
            await help_command(update, context)
        elif update.message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
            await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        elif update.message.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞":
            await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è –∫–æ—Ä–∑–∏–Ω—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        elif update.message.text == "üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å":
            await admin_panel(update, context)
        logger.info("Message processed successfully")
    except Exception as e:
        logger.error(f"Error in message handler: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    try:
        logger.info(f"Admin command received from user {update.effective_user.id}")
        user_id = update.effective_user.id
        username = update.effective_user.username
        
        logger.info(f"Checking admin access for user_id: {user_id}, username: {username}")
        
        if is_admin(user_id, username):
            logger.info("Admin access granted")
            admin_url = "https://cwompu1.github.io/dewa/"
            keyboard = [[InlineKeyboardButton(
                text="üîê –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
                url=admin_url
            )]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! üëã\n"
                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
                reply_markup=reply_markup
            )
            logger.info("Admin panel link sent successfully")
        else:
            logger.warning(f"Admin access denied for user_id: {user_id}, username: {username}")
            await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
    except Exception as e:
        logger.error(f"Error in admin command: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def is_admin(user_id, username=None):
    # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_ids = [307233318]  # –í–∞—à Telegram ID
    # –°–ø–∏—Å–æ–∫ username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_usernames = ['gafurrovvv']
    
    if username and username.lower() in [u.lower() for u in admin_usernames]:
        return True
    return user_id in admin_ids

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        logger.info("Starting bot initialization...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
        application = Application.builder().token(TOKEN).connect_timeout(30.0).read_timeout(30.0).write_timeout(30.0).build()
        logger.info("Application instance created")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        with app.app_context():
            logger.info("Initializing database...")
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            db.create_all()
            logger.info("Database tables created")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∞
            Admin.init_superadmin()
            logger.info("Superadmin initialized")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            application.add_handler(CommandHandler("start", start))
            application.add_handler(CommandHandler("help", help_command))
            application.add_handler(CommandHandler("catalog", catalog_command))
            application.add_handler(CommandHandler("openapp", open_app))
            application.add_handler(CallbackQueryHandler(button_handler))
            application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
            logger.info("Command handlers added")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
            application.post_init = setup_commands_and_menu
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω-—Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
            setup_admin_handlers(application)
            logger.info("Admin handlers registered")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            logger.info("Starting polling...")
            application.run_polling(allowed_updates=Update.ALL_TYPES)
            
    except Exception as e:
        logger.error(f"Critical error in main: {e}", exc_info=True)
        raise

if __name__ == '__main__':
    main() 